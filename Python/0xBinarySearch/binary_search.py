def bin_search_index(user_list, find_value):
    """Алгоритм бинарного поиска."""
    low = 0  # наименьшая граница списка, в которой выполняется поиск
    high = len(user_list) - 1  # наибольшая граница списка, в которой выполняется поиск

    """
    Представим список состоящий из 10 элементов:
    list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    Тогда len(list) возвратит значение, равное 10.
    Поэтому в переменной high мы отнимаем единичку,
    чтобы получить индекс последнего элемента.
    """

    #  Проверяем список, пока нижняя граница не станет равна верхней
    while low <= high:
        mid = int((low + high)/2)  # среднее значение
        hypothesis = user_list[mid]  # предполагаемое число
        if hypothesis == find_value:  # если предполагаемое число равно нужному числу
            return mid  # возвращаем индекс нужного числа из списка
        elif hypothesis > find_value:  # если больше
            high = mid - 1  # уменьшаем верхнюю границу
        else:  # иначе
            low = mid + 1  # увеличиваем верхнюю границу
        # повторяем пока не найдем число
    return None  # если числа не существует, возвращаем None


def bin_search_value(user_list, find_value):
    """Алгоритм бинарного поиска. (Возвращает значение, а не индекс)"""
    low = 0  # наименьшая граница списка, в которой выполняется поиск
    high = len(user_list) - 1  # наибольшая граница списка, в которой выполняется поиск

    """
    Представим список состоящий из 10 элементов:
    list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    Тогда len(list) возвратит значение, равное 10.
    Поэтому в переменной high мы отнимаем единичку,
    чтобы получить индекс последнего элемента.
    """

    #  Проверяем список, пока нижняя граница не станет равна верхней
    while low <= high:
        mid = int((low + high)/2)  # среднее значение
        hypothesis = user_list[mid]  # предполагаемое число
        if hypothesis == find_value:  # если предполагаемое число равно нужному числу
            return hypothesis  # возвращаем значение нужного числа из списка
        elif hypothesis > find_value:  # если больше
            high = mid - 1  # уменьшаем верхнюю границу
        else:  # иначе
            low = mid + 1  # увеличиваем верхнюю границу
        # повторяем пока не найдем число
    return None  # если числа не существует, возвращаем None
